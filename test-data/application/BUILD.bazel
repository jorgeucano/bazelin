load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_nodejs//:defs.bzl", "rollup_bundle")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_devserver")

package(default_visibility = ["//visibility:public"])

ng_module(
    name = "application",
    srcs = glob(
        ["app.component.ts", "app.module.ts"],
        exclude = ["main.ts"],
    ),
    assets = [
        ":app.component.html",
        "//test-data/application/styles:main",
    ],
    tsconfig = "//test-data/application:tsconfig.json",
    deps = [
        "@angular//packages/core",
        "@angular//packages/platform-browser",
        "@angular//packages/platform-browser/animations",
        "@angular//packages/router",
        "@npm//@ngrx/store",
    ],
)

# We always strip these paths off the front of any assets we serve
_ROOT_DIRS = [
    "npm/node_modules/zone.js/dist",
    "npm/node_modules/@angular/material/prebuilt-themes",
    "npm/node_modules/@ngrx/store/bundles",
]

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = _ROOT_DIRS,
    # Serve these files but don't inject tags for them into the index file
    # This might be because we only want to lazy-load these scripts on-demand,
    # or because they aren't compatible with Require.js so we must use a runtime
    # loader to load them.
    data = [
        "@npm//node_modules/@ngrx/store:bundles/store.umd.min.js",
    ],
    # Start from the development version of the main
    entry_module = "bazelin/test-data/application/main",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        ":require.config.js",
        ":module-id.js",
        "@npm//node_modules/tslib:tslib.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    # The corresponding <script> or <link> tags will be injected into the index_html
    static_files = [
        "index.html",
        "//test-data/application/styles:main.css",
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        #  We load zone.js outside the bundle. That's because it's a "pollyfill"
        # which speculates that such features might be available in a browser.
        # Also it's tricky to configure dead code elimination to understand that
        # zone.js is used, given that we don't have any import statement that
        # imports from it.
        "@npm//node_modules/zone.js:dist/zone.min.js",
    ],
    # Tell Bazel to build the sources first
    deps = [":application"],
)
